players <- lapply(1:nrow(leagues), function(i) {
leagueConn <- ffscrapr::mfl_connect(current_season, user_name = "jakesch", password = "schuf!ness3", league_id = leagues$league_id[i])
ffscrapr::ff_rosters(leagueConn, current_week) %>%
dplyr::filter(franchise_id == leagues$franchise_id[i])
}) %>%
purrr::reduce(dplyr::bind_rows) %>%
dplyr::select(franchise_id, franchise_name, player_id, player_name, pos, team) %>%
dplyr::distinct()
allPlayers <- rbind(allPlayers, players)
# conn <- ffscrapr::mfl_connect(current_season, user_name = input$username, password = input$password)
conn <- ffscrapr::fleaflicker_connect(current_season, user_email = "jakob@schema-ff.de")
leagues <- ffscrapr::ff_userleagues(conn)
# for each row in leagues get league players and combine them in allPlayers
players <- lapply(1:nrow(leagues), function(i) {
leagueConn <- ffscrapr::fleaflicker_connect(current_season, user_email = "jakob@schema-ff.de", league_id = "193571")
ffscrapr::ff_rosters(leagueConn, current_week) %>%
dplyr::filter(franchise_id == leagues$franchise_id[i])
}) %>%
purrr::reduce(dplyr::bind_rows) %>%
dplyr::select(franchise_id, franchise_name, player_id, player_name, pos, team) %>%
dplyr::distinct() %>%
dplyr::mutate(player_id = as.character(player_id)) %>%
dplyr::left_join(
playerIds %>%
dplyr::select(fleaflicker_id, gsis_id) %>%
dplyr::filter(!is.na(fleaflicker_id)),
by = c("player_id" = "fleaflicker_id")
)
allPlayers <- rbind(allPlayers, players)
# for each row in leagues get league players and combine them in allPlayers
players <- lapply(1:nrow(leagues), function(i) {
leagueConn <- ffscrapr::fleaflicker_connect(current_season, user_email = "jakob@schema-ff.de", league_id = "193571")
ffscrapr::ff_rosters(leagueConn, current_week) %>%
dplyr::filter(franchise_id == leagues$franchise_id[i])
}) %>%
purrr::reduce(dplyr::bind_rows) %>%
dplyr::select(franchise_id, franchise_name, player_id, player_name, pos, team) %>%
dplyr::distinct() %>%
dplyr::mutate(player_id = as.character(player_id))
allPlayers <- rbind(allPlayers, players)
View(allPlayers)
?clean_player_names
allPlayers <- allPlayers %>%
dplyr::mutate(player_name = nflreadr::clean_player_names(player_name))
View(allPlayers)
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
View(current_nfl_matchups)
View(allPlayers)
allPlayers <- allPlayers %>%
dplyr::mutate(
player_name = nflreadr::clean_player_names(player_name),
team = nflreadr::clean_team_names(team)
)
allPlayers <- allPlayers %>%
dplyr::mutate(
player_name = nflreadr::clean_player_names(player_name),
team = nflreadr::clean_team_abbrs(team)
)
View(allPlayers)
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
browser()
browser()
browser()
1
?browser()
runApp('wherearemyplayers')
xyc
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season)
View(nfl_weekly_roster)
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season) %>%
dplyr::filter(week == current_week)
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::select(full_name, team, position, depth_chart_position, jersey_number, status)
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::select(full_name, team, position, depth_chart_position, jersey_number, status) %>%
dplyr::select(full_name = nflreadr::clean_player_names(full_name))
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::select(full_name, team, position, depth_chart_position, jersey_number, status) %>%
dplyr::select(
full_name = nflreadr::clean_player_names(full_name)
)
nfl_weekly_roster <- nflreadr::load_rosters_weekly(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::select(full_name, team, position, depth_chart_position, jersey_number, status) %>%
dplyr::mutate(
full_name = nflreadr::clean_player_names(full_name),
team = nflreadr::clean_team_abbrs(team)
)
runApp('wherearemyplayers')
?sidebarPanel
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
# get current time in local timezone
current_time <- Sys.time()
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
status = dplyr::case_when(
)
)
View(current_nfl_matchups)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
gametime = as.POSIXct(gametime, tz = "ETC") %>%
as.POSIXct(tz = Sys.timezone()) %>%
format("%Y-%m-%d %H:%M"),
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = as.POSIXct(paste(date, gametime), format = "%Y-%m-%d %I:%M %p", tz = "ETC") %>%
with_tz(tz = "Europe/Berlin"),
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = as.POSIXct(paste(date, gametime), format = "%Y-%m-%d %I:%M %p", tz = "ETC")
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %I:%M %p", tz = "ETC")
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = paste(gameday, gametime, "ETC")
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = paste(gameday, gametime, "ETC"),
datetime = as.POSIXct(datetime, format = "%Y-%m-%d %I:%M %p", tz = "UTC"),
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# convert gametime to local timezone
datetime = paste(gameday, gametime, "ETC"),
check = ifelse(current_time > as.POSIXct(datetime, format = "%Y-%m-%d %I:%M %p %Z"), "finished", "upcoming")
#    status = dplyr::case_when(
# convert
#    )
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
game_time = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %I:%M %p", tz = "America/New_York"),
# check if game is upcoming, running or finished
status = case_when(
game_time > current_time ~ "upcoming",
game_time < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
game_time + 60 * 60 * 3 < current_time ~ "finished"
)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
# check if game is upcoming, running or finished
status = case_when(
game_time > current_time ~ "upcoming",
game_time < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
game_time + 60 * 60 * 3 < current_time ~ "finished"
)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
# check if game is upcoming, running or finished
#status = case_when(
#  game_time > current_time ~ "upcoming",
#  game_time < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
#  game_time + 60 * 60 * 3 < current_time ~ "finished"
#)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
#status = case_when(
#  game_time > current_time ~ "upcoming",
#  game_time < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
#  game_time + 60 * 60 * 3 < current_time ~ "finished"
#)
)
# get users timezone
user_timezone <- Sys.timezone()
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
#status = case_when(
#  game_time > current_time ~ "upcoming",
#  game_time < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
#  game_time + 60 * 60 * 3 < current_time ~ "finished"
#)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
status = case_when(
timestamp > current_time ~ "upcoming",
timestamp < current_time & game_time + 60 * 60 * 3 > current_time ~ "running",
timestamp + 60 * 60 * 3 < current_time ~ "finished"
)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
status = case_when(
timestamp > current_time ~ "upcoming",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "running",
timestamp + 60 * 60 * 3 < current_time ~ "finished"
)
)
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
status = case_when(
timestamp > current_time ~ "",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "primary",
timestamp + 60 * 60 * 3 < current_time ~ "warning"
)
)
runApp('wherearemyplayers')
current_nfl_matchups <- nflreadr::load_schedules(2023) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
)
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
showPageSpinner
?showPageSpinner
runApp('wherearemyplayers')
runApp('wherearemyplayers')
runApp('wherearemyplayers')
current_season <- nflreadr::get_current_season()
current_season <- nflreadr::get_current_season(TRUE)
runApp('wherearemyplayers')
View(current_nfl_matchups)
runApp('wherearemyplayers')
View(current_nfl_matchups)
runApp('wherearemyplayers')
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = lubridate::dmy_hm(paste(gameday, gametime), tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = lubridate::dmy_hm(paste(gameday, gametime), tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
current_week <- 1
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = lubridate::dmy_hm(paste(gameday, gametime), tz = "America/New_York"),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = paste(gameday, gametime),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
dmy_hm()
dmy_hm("2021-09-09 20:20", tz = "America/New_York")
dmy_hm("2011-12-31 12:59:59", tz = "America/New_York")
dmy_hm("2011-12-31 12:59:59")
dmy_hm(as.POSIXct("2011-12-31 12:59:59"), tz = "America/New_York")
lubridate::as_date("2021-09-09")
lubridate::as_date("2021-09-09", format = "%Y%m%d")
lubridate::as_date("2021-09-09", format = "%Y.%m.%d")
lubridate::as_date("2021-09-09", format = "%Y-%m-%d")
ymd_hms("2010-08-03 00:50:50", tz = "Europe/London")
ymd_hms("2010-08-03 00:50:50", tz = "America/New_York")
dmy_hm(as.POSIXct("2011-12-31 12:59:59"), tz = "America/New_York")
dmy_hm("2011-12-31 12:59:59", tz = "America/New_York")
ymd_hms("2010-08-03 00:50:50", tz = "America/New_York")
dmy_hms("2011-12-31 12:59:59", tz = "America/New_York")
dmy_hms("2011-12-31 00:59:59", tz = "America/New_York")
ymd_hms("2010-08-03 00:50:50", tz = "America/New_York")
lubridate::as_datetime("2010-08-03 00:50:50", tz = "America/New_York")
lubridate::as_datetime("2010-08-03 00:50:50", format = "%d", tz = "America/New_York")
lubridate::as_datetime("2010-08-03 00:50:50", format = "%d.%m.%Y", tz = "America/New_York")
# convert ymd to dmy
current_nfl_matchups$gameday <- lubridate::ymd(current_nfl_matchups$gameday)
# convert ymd to dmy
lubridate::ymd(current_nfl_matchups$gameday)
# convert ymd to dmy
current_nfl_matchups$gameday <- lubridate::ymd(current_nfl_matchups$gameday)
current_nfl_matchups$gameday <- lubridate::format(current_nfl_matchups$gameday, format = "%d.%m.%Y")
lubridate::format(current_nfl_matchups$gameday, format = "%d.%m.%Y")
# make timestamp readable
current_nfl_matchups$weekday <- format(current_nfl_matchups$timestamp, "%A")
# make timestamp readable
format(current_nfl_matchups$timestamp, "%A")
# make current_nfl_matchups$timestamp readable
current_nfl_matchups$weekday <- weekdays(current_nfl_matchups$timestamp)
current_nfl_matchups$gameday <- format(current_nfl_matchups$timestamp, "%d.%m.")
current_nfl_matchups$gametime <- format(current_nfl_matchups$timestamp, "%H:%M")
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = paste(gameday, gametime),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
current_nfl_matchups$gameday <- format(current_nfl_matchups$timestamp, "%d.%m. %H:%M")
# make current_nfl_matchups$timestamp readable
current_nfl_matchups$weekday <- weekdays(current_nfl_matchups$timestamp)
# make current_nfl_matchups$timestamp readable
current_nfl_matchups$weekday <- weekdays(current_nfl_matchups$timestamp, TRUE)
current_nfl_matchups <- nflreadr::load_schedules(current_season) %>%
dplyr::filter(week == current_week) %>%
dplyr::mutate(
label = paste(away_team, "@", home_team),
# create game_time from gameday and gametime
timestamp = as.POSIXct(paste(gameday, gametime), format = "%Y-%m-%d %H:%M", tz = "America/New_York"),
test = paste(gameday, gametime),
timestamp = as.POSIXct(timestamp, tz = user_timezone),
timestamp_label = paste(
weekdays(current_nfl_matchups$timestamp, TRUE), format(current_nfl_matchups$timestamp, "%d.%m. %H:%M")
),
# check if game is upcoming, running or finished
color = case_when(
timestamp > current_time ~ "primary",
timestamp < current_time & timestamp + 60 * 60 * 3 > current_time ~ "success",
timestamp + 60 * 60 * 3 < current_time ~ "danger"
)
) %>%
dplyr::arrange(color, timestamp)
runApp('wherearemyplayers')
runApp('wherearemyplayers')
